generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Workspace {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String?
  inviteCode String
  members    Member[]
  projects   Project[]
}

enum Role {
  ADMIN
  MEMBER
}

model Member {
  id          String    @id @default(uuid())
  userId      String
  name        String
  imageUrl    String?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        Role
  tasks       Task[]
  comments    Comment[]
}

model Project {
  id          String    @id @default(uuid())
  name        String
  workspaceId String
  imageUrl    String?
  worskpace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  IN_REVIEW
  DONE
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id          String        @id @default(uuid())
  name        String
  description String
  dueDate     DateTime
  status      TaskStatus
  priority    TaskPriority?
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  memberId    String
  member      Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  comments    Comment[]
}

model Comment {
  id       String @id @default(uuid())
  content  String
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}
